package controller;

import model.*;
import service.LottoService;
import view.InputView;
import view.OutputView;

import java.util.List;

public class LottoController {
    private final InputView inputView;
    private final OutputView outputView;
    private final LottoService lottoService;


    public LottoController() {
        this.inputView = new InputView();
        this.outputView = new OutputView();
        this.lottoService = new LottoService();
    }

    public void run() {
        Money totalMoney = new Money(inputView.inputMoney());
        Money remainedMoney = new Money(totalMoney);
        if (canProceedGameWithInputMoney(totalMoney) == false) {
            outputView.printGameEndMessageWithPoorStatus();
            return;
        }

        LottoGroup manualLottoGroup = getManaulLottoGroup(remainedMoney);
        LottoGroup autoGeneratedLottoGroup = lottoService.purchaseAutoGeneratedLottoGroup(remainedMoney);
        LottoGroup lottoGroup = LottoGroup.addAll(manualLottoGroup, autoGeneratedLottoGroup);
        printLottoGroupStatus(lottoGroup, autoGeneratedLottoGroup.size(), manualLottoGroup.size());

        Lotto winningLotto = getWinningLotto();
        LottoNumber bonusNumber = LottoNumber.from(inputView.getBonusBallNumber());
        lottoService.validateWinningLotto(winningLotto, bonusNumber);

        printLottoResult(lottoGroup, winningLotto, bonusNumber, totalMoney);
    }

    private boolean canProceedGameWithInputMoney(Money money) {
        return lottoService.canProceedGameWithMoney(money);
    }

    private LottoGroup getManaulLottoGroup(Money money) {
        Long manualLottoInputNumber = inputView.inputManualLottoNumber();
        lottoService.validateManualLottoInputNumber(manualLottoInputNumber, money);

        List<String> manualLottoGroupString = inputView.getManualLottoGroupString(manualLottoInputNumber);
        LottoGroup manualLottoGroup = lottoService.purchaseManualLottoGroup(manualLottoGroupString, money);

        return manualLottoGroup;
    }

    private void printLottoGroupStatus(LottoGroup lottoGroup, int autoGeneratedLottoGroupSize, int manualLottoGroupSize) {
        outputView.putTimes(autoGeneratedLottoGroupSize, manualLottoGroupSize);
        outputView.printLottoGroup(lottoGroup.getLottoGroup());
    }

    private Lotto getWinningLotto() {
        String lottoString = inputView.getLottoString();
        Lotto winningLotto = lottoService.generateLottoWithLottoString(lottoString);
        return winningLotto;
    }

    private void printLottoResult(LottoGroup lottoGroup, Lotto winningLotto, LottoNumber bonusNumber, Money totalMoney) {
        LottoPrizeMap lottoPrizeMap = lottoService.calculateLottoResult(lottoGroup, winningLotto, bonusNumber);
        double earningRates = lottoService.getEarningRates(lottoPrizeMap, totalMoney);
        outputView.printResult(lottoPrizeMap);
        outputView.printEarningRate(earningRates);
    }
}
